mcent <- efficient_mc_er(new_mc, 3)
bs1_res[i, bs] <- lzent
bs2_res[i, bs] <- mcent
}
message('.', appendLF = F)
}
ymax <- max(max(density(emp_results[[2]])$y),
max(density(bs1_res[1,])$y),
max(density(bs2_res[1,])$y))
par(mfrow=c(2,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs1_res[s,]), col=rgb(0.75,0,0,0.25))
}
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs2_res[s,]), col=rgb(0,0,0.75,0.25))
}
# par(mfrow=c(1,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,25),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density((bs1_res[s,] - test_p) / (1-test_p)), col=rgb(0.75,0,0,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,30),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs2_res)){
lines(density((bs2_res[s,] - test_p) / (1-test_p)), col=rgb(0,0,0.75,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
test_p
test_p <- true_er / log2(seq_len) / 2
test_p
tm <- fo_sim_cases[[2]]
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
seq_len = 1000
bootsamps <- 1000
test_p <- true_er / log2(seq_len) / 2
n_sims <- 10
bs1_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
bs2_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
for(i in 1:n_sims){
mc <- SimulateMarkovChain(tm, seq_len)
for(bs in 1:bootsamps){
new_mc <- stationary_bootstrap(mc, test_p)
lzent <- SWLZEntRate(new_mc)
# lzent <- fixedwindow_lz77(new_mc, 750)
mcent <- efficient_mc_er(new_mc, 3)
bs1_res[i, bs] <- lzent
bs2_res[i, bs] <- mcent
}
message('.', appendLF = F)
}
ymax <- max(max(density(emp_results[[2]])$y),
max(density(bs1_res[1,])$y),
max(density(bs2_res[1,])$y))
par(mfrow=c(2,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs1_res[s,]), col=rgb(0.75,0,0,0.25))
}
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs2_res[s,]), col=rgb(0,0,0.75,0.25))
}
# par(mfrow=c(1,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,25),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density((bs1_res[s,] - test_p) / (1-test_p)), col=rgb(0.75,0,0,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,30),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs2_res)){
lines(density((bs2_res[s,] - test_p) / (1-test_p)), col=rgb(0,0,0.75,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
tm <- fo_sim_cases[[2]]
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
seq_len = 1000
bootsamps <- 1000
test_p <- 2* true_er / log2(seq_len)
n_sims <- 10
bs1_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
bs2_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
for(i in 1:n_sims){
mc <- SimulateMarkovChain(tm, seq_len)
for(bs in 1:bootsamps){
new_mc <- stationary_bootstrap(mc, test_p)
lzent <- SWLZEntRate(new_mc)
# lzent <- fixedwindow_lz77(new_mc, 750)
mcent <- efficient_mc_er(new_mc, 3)
bs1_res[i, bs] <- lzent
bs2_res[i, bs] <- mcent
}
message('.', appendLF = F)
}
ymax <- max(max(density(emp_results[[2]])$y),
max(density(bs1_res[1,])$y),
max(density(bs2_res[1,])$y))
par(mfrow=c(2,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs1_res[s,]), col=rgb(0.75,0,0,0.25))
}
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs2_res[s,]), col=rgb(0,0,0.75,0.25))
}
# par(mfrow=c(1,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,25),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density((bs1_res[s,] - test_p) / (1-test_p)), col=rgb(0.75,0,0,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,30),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs2_res)){
lines(density((bs2_res[s,] - test_p) / (1-test_p)), col=rgb(0,0,0.75,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
tm <- fo_sim_cases[[2]]
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
seq_len = 1000
bootsamps <- 1000
test_p <- true_er / log2(seq_len) / 1.1
n_sims <- 10
bs1_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
bs2_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
for(i in 1:n_sims){
mc <- SimulateMarkovChain(tm, seq_len)
for(bs in 1:bootsamps){
new_mc <- stationary_bootstrap(mc, test_p)
lzent <- SWLZEntRate(new_mc)
# lzent <- fixedwindow_lz77(new_mc, 750)
mcent <- efficient_mc_er(new_mc, 3)
bs1_res[i, bs] <- lzent
bs2_res[i, bs] <- mcent
}
message('.', appendLF = F)
}
ymax <- max(max(density(emp_results[[2]])$y),
max(density(bs1_res[1,])$y),
max(density(bs2_res[1,])$y))
par(mfrow=c(2,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs1_res[s,]), col=rgb(0.75,0,0,0.25))
}
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs2_res[s,]), col=rgb(0,0,0.75,0.25))
}
# par(mfrow=c(1,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,25),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density((bs1_res[s,] - test_p) / (1-test_p)), col=rgb(0.75,0,0,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,30),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs2_res)){
lines(density((bs2_res[s,] - test_p) / (1-test_p)), col=rgb(0,0,0.75,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
tm <- fo_sim_cases[[2]]
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
seq_len = 1000
bootsamps <- 1000
test_p <- true_er / log2(seq_len) / 1.5
n_sims <- 10
bs1_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
bs2_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
for(i in 1:n_sims){
mc <- SimulateMarkovChain(tm, seq_len)
for(bs in 1:bootsamps){
new_mc <- stationary_bootstrap(mc, test_p)
lzent <- SWLZEntRate(new_mc)
# lzent <- fixedwindow_lz77(new_mc, 750)
mcent <- efficient_mc_er(new_mc, 3)
bs1_res[i, bs] <- lzent
bs2_res[i, bs] <- mcent
}
message('.', appendLF = F)
}
ymax <- max(max(density(emp_results[[2]])$y),
max(density(bs1_res[1,])$y),
max(density(bs2_res[1,])$y))
par(mfrow=c(2,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs1_res[s,]), col=rgb(0.75,0,0,0.25))
}
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs2_res[s,]), col=rgb(0,0,0.75,0.25))
}
# par(mfrow=c(1,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,25),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density((bs1_res[s,] - test_p) / (1-test_p)), col=rgb(0.75,0,0,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,30),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs2_res)){
lines(density((bs2_res[s,] - test_p) / (1-test_p)), col=rgb(0,0,0.75,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
# set.seed(1278)
# mc <- SimulateMarkovChain(tm, 1000)
# bs_samps <- 500
# block_sizes <- seq(10, 100, 5)
# bs_results <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# bs_results2 <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# bs_results3 <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# bs_results4 <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# for(bs in 1:length(block_sizes)){
#   for(B in 1:bs_samps){
#     ns <- block_bootstrap(mc_seq = mc, block_size = block_sizes[bs])
#     ns2 <- overlap_bootstrap(mc_seq = mc, block_size = block_sizes[bs])
#     bs_results[B, bs] <- efficient_mc_er(ns, mc_order=1)
#     bs_results2[B, bs] <- SWLZEntRate(ns)
#     bs_results3[B, bs] <- efficient_mc_er(ns2, mc_order=1)
#     bs_results4[B, bs] <- SWLZEntRate(ns2)
#   }
# }
# par(mfrow=c(1,2))
# plot(block_sizes, apply(bs_results, 2, sd), type='l', ylim=c(0,0.25))
# lines(block_sizes, apply(bs_results2, 2, sd), type='l', col='blue')
# lines(block_sizes, apply(bs_results3, 2, sd), type='l', col='green')
# lines(block_sizes, apply(bs_results4, 2, sd), type='l', col='red')
# abline(h=apply(entropy_results,2,sd)[4])
# plot(block_sizes, apply(bs_results, 2, mean), type='l', ylim=c(0,1))
# lines(block_sizes, apply(bs_results2, 2, mean), type='l', col='blue')
# lines(block_sizes, apply(bs_results3, 2, mean), type='l', col='green')
# lines(block_sizes, apply(bs_results4, 2, mean), type='l', col='red')
# abline(h=apply(entropy_results,2,mean)[4])
# Stationary Bootstrap ------ Probs not steps------------------------
# set.seed(1278)
# mc <- SimulateMarkovChain(tm, seq_len)
# bs_samps <- 500
# block_sizes <- seq(0.005,0.5,length.out = 25)
# bs_results <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# bs_results2 <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# for(bs in 1:length(block_sizes)){
#     for(B in 1:bs_samps){
#         ns <- stationary_bootstrap(mc, block_sizes[bs])
#         bs_results[B, bs] <- efficient_mc_er(ns, mc_order=1)
#         bs_results2[B, bs]
tm <- fo_sim_cases[[2]]
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
seq_len = 1000
bootsamps <- 1000
test_p <- true_er / log2(seq_len)
n_sims <- 10
bs1_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
bs2_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
for(i in 1:n_sims){
mc <- SimulateMarkovChain(tm, seq_len)
for(bs in 1:bootsamps){
new_mc <- stationary_bootstrap(mc, test_p)
lzent <- SWLZEntRate(new_mc)
# lzent <- fixedwindow_lz77(new_mc, 750)
mcent <- efficient_mc_er(new_mc, 3)
bs1_res[i, bs] <- lzent
bs2_res[i, bs] <- mcent
}
message('.', appendLF = F)
}
ymax <- max(max(density(emp_results[[2]])$y),
max(density(bs1_res[1,])$y),
max(density(bs2_res[1,])$y))
par(mfrow=c(2,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs1_res[s,]), col=rgb(0.75,0,0,0.25))
}
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs2_res[s,]), col=rgb(0,0,0.75,0.25))
}
# par(mfrow=c(1,2))
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,25),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density((bs1_res[s,] - test_p) / (1-test_p)), col=rgb(0.75,0,0,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
plot(density(emp_results[[2]][,4]), xlim=c(0,1), ylim=c(0,30),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs2_res)){
lines(density((bs2_res[s,] - test_p) / (1-test_p)), col=rgb(0,0,0.75,0.25))
}
lines(density(emp_results[[2]][,4]), col='black', lwd=2)
abline(v=true_er, lty=3)
# set.seed(1278)
# mc <- SimulateMarkovChain(tm, 1000)
# bs_samps <- 500
# block_sizes <- seq(10, 100, 5)
# bs_results <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# bs_results2 <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# bs_results3 <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# bs_results4 <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# for(bs in 1:length(block_sizes)){
#   for(B in 1:bs_samps){
#     ns <- block_bootstrap(mc_seq = mc, block_size = block_sizes[bs])
#     ns2 <- overlap_bootstrap(mc_seq = mc, block_size = block_sizes[bs])
#     bs_results[B, bs] <- efficient_mc_er(ns, mc_order=1)
#     bs_results2[B, bs] <- SWLZEntRate(ns)
#     bs_results3[B, bs] <- efficient_mc_er(ns2, mc_order=1)
#     bs_results4[B, bs] <- SWLZEntRate(ns2)
#   }
# }
# par(mfrow=c(1,2))
# plot(block_sizes, apply(bs_results, 2, sd), type='l', ylim=c(0,0.25))
# lines(block_sizes, apply(bs_results2, 2, sd), type='l', col='blue')
# lines(block_sizes, apply(bs_results3, 2, sd), type='l', col='green')
# lines(block_sizes, apply(bs_results4, 2, sd), type='l', col='red')
# abline(h=apply(entropy_results,2,sd)[4])
# plot(block_sizes, apply(bs_results, 2, mean), type='l', ylim=c(0,1))
# lines(block_sizes, apply(bs_results2, 2, mean), type='l', col='blue')
# lines(block_sizes, apply(bs_results3, 2, mean), type='l', col='green')
# lines(block_sizes, apply(bs_results4, 2, mean), type='l', col='red')
# abline(h=apply(entropy_results,2,mean)[4])
# Stationary Bootstrap ------ Probs not steps------------------------
# set.seed(1278)
# mc <- SimulateMarkovChain(tm, seq_len)
# bs_samps <- 500
# block_sizes <- seq(0.005,0.5,length.out = 25)
# bs_results <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# bs_results2 <- matrix(NA, nrow=bs_samps, ncol=length(block_sizes))
# for(bs in 1:len
test_p
test_p * seq_len - 1
(test_p * seq_len - 1) / (seq_len - 1)
(floor(test_p * seq_len) - 1) / (seq_len - 1)
case <- 1
tm <- fo_sim_cases[[case]]
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
seq_len = 500
bootsamps <- 1000
test_p <- true_er / log2(seq_len)
n_sims <- 10
bs1_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
bs2_res <- matrix(NA, nrow=n_sims, ncol = bootsamps)
for(i in 1:n_sims){
mc <- SimulateMarkovChain(tm, seq_len)
for(bs in 1:bootsamps){
new_mc <- stationary_bootstrap(mc, test_p)
lzent <- SWLZEntRate(new_mc)
# lzent <- fixedwindow_lz77(new_mc, 750)
mcent <- efficient_mc_er(new_mc, 3)
bs1_res[i, bs] <- lzent
bs2_res[i, bs] <- mcent
}
message('.', appendLF = F)
}
ymax <- max(max(density(emp_results[[case]])$y),
max(density(bs1_res[1,])$y),
max(density(bs2_res[1,])$y))
par(mfrow=c(2,2))
plot(density(emp_results[[case]][,3]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs1_res[s,]), col=rgb(0.75,0,0,0.25))
}
plot(density(emp_results[[case]][,3]), xlim=c(0,1), ylim=c(0,20),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density(bs2_res[s,]), col=rgb(0,0,0.75,0.25))
}
# par(mfrow=c(1,2))
plot(density(emp_results[[case]][,3]), xlim=c(0,1), ylim=c(0,25),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs1_res)){
lines(density((bs1_res[s,] - test_p) / (1-test_p)), col=rgb(0.75,0,0,0.25))
}
lines(density(emp_results[[case]][,3]), col='black', lwd=2)
abline(v=true_er, lty=3)
plot(density(emp_results[[case]][,3]), xlim=c(0,1), ylim=c(0,30),
xlab='', main=paste('Effective Block Size =',1/test_p))
for(s in 1:nrow(bs2_res)){
lines(density((bs2_res[s,] - test_p) / (1-test_p)), col=rgb(0,0,0.75,0.25))
}
lines(density(emp_results[[case]][,3]), col='black', lwd=2)
abline(v=true_er, lty=3)
true_p
test_p
true_er - test_p
(true_er - test_p) / (1 - test_p)
true_er
mean(bs1_res[1])
mean(bs1_res[1,])
(bs1_res[1,] - test_p) / (1-test_p)
mean((bs1_res[1,] - test_p) / (1-test_p))
SWLZEntRate(mc)
fixedwindow_lz77(mc, 250)
fixedwindow_lz77(mc, 100)
fixedwindow_lz77(mc, 400)
fixedwindow_lz77(mc, 500)
fixedwindow_lz77(mc, 499)
fixedwindow_lz77(mc, 498)
fixedwindow_lz77(mc, 410)
fixedwindow_lz77(mc, 400)
fixedwindow_lz77(mc, 350)
fixedwindow_lz77(mc, 250)
(fixedwindow_lz77(mc, 250) - test_p ) / (1-p)
(fixedwindow_lz77(mc, 250) - test_p ) / (1-test_p)
tm <- dirmult::rdirichlet(n=8, alpha = c(rep(5,8)))
tm
mc <- SimulateMarkovChain(tm, n_sims = 500)
tm <- dirmult::rdirichlet(n=8, alpha = c(rep(5,8)))
mc <- SimulateMarkovChain(tm, n_sims = 500)
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
true_er
set.seed(123)
tm <- dirmult::rdirichlet(n=8, alpha = c(rep(5,8)))
mc <- SimulateMarkovChain(tm, n_sims = 500)
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
true_er
set.seed(123)
tm <- matrix(NA, 8,8)
# for(i in 1:8){
#   tm[i,] <- rdirichlet(n=1, alpha = sample(x=(1:8)^6, 8, replace=F))
# }
upper <- 6.3
tm[1,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[2,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[3,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[4,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[5,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[6,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[7,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[8,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm <- dirmult::rdirichlet(n=8, alpha = c(rep(5,8)))
mc <- SimulateMarkovChain(tm, n_sims = 500)
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
true_er
set.seed(123)
tm <- matrix(NA, 8,8)
# for(i in 1:8){
#   tm[i,] <- rdirichlet(n=1, alpha = sample(x=(1:8)^6, 8, replace=F))
# }
upper <- 6.3
tm[1,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[2,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[3,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[4,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[5,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[6,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[7,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
tm[8,] <- dirmult::rdirichlet(n=1, alpha = sample(1:8, 8, replace = T)^upper)
mc <- SimulateMarkovChain(tm, n_sims = 500)
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
true_er
mc
true_er
SWLZEntRate(true_er)
fixedwindow_lz77(true_er, 10)
fixedwindow_lz77(true_er, 500)
fixedwindow_lz77(true_er, 250)
fixedwindow_lz77(true_er, 100)
fixedwindow_lz77(true_er, 50)
fixedwindow_lz77(mc, 50)
fixedwindow_lz77(mc, 250)
SWLZEntRate(true_er)
SWLZEntRate(mc)
fixedwindow_lz77(mc, 250)
n_sims <- 1000
mc_results <- matrix(NA, nrow=n_sims, ncol=3)
true_er <- CalcMarkovEntropyRate(tm, CalcEigenStationary(tm))
for(i in 1:n_sims){
mc <- SimulateMarkovChain(tm, n_sims = 500)
mc_results[i, 1] <- SWLZEntRate(mc)
mc_results[i, 2] <- fixedwindow_lz77(mc, 250)
mc_results[i, 3] <- fixedquick_lz77(mc, 250)
}
apply(mc_results, 2, mean)
true_er
boxplot.matrix(mc_results)
par(mfrow=c(1,1))
boxplot.matrix(mc_results)
abline(h=true_er)
